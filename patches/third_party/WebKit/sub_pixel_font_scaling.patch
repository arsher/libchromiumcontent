diff --git a/Source/core/css/ComputedStyleCSSValueMapping.cpp b/Source/core/css/ComputedStyleCSSValueMapping.cpp
index 06fa017..78a8b5a 100644
--- a/Source/core/css/ComputedStyleCSSValueMapping.cpp
+++ b/Source/core/css/ComputedStyleCSSValueMapping.cpp
@@ -520,7 +520,7 @@ static PassRefPtrWillBeRawPtr<CSSValueList> valueForFontFamily(const ComputedSty
 
 static PassRefPtrWillBeRawPtr<CSSPrimitiveValue> valueForFontSize(const ComputedStyle& style)
 {
-    return zoomAdjustedPixelValue(style.fontDescription().computedSize(), style);
+    return zoomAdjustedPixelValue(RuntimeEnabledFeatures::subpixelFontScalingEnabled() ? style.fontDescription().computedSize() : style.fontDescription().computedPixelSize(), style);
 }
 
 static PassRefPtrWillBeRawPtr<CSSPrimitiveValue> valueForFontStretch(const ComputedStyle& style)
diff --git a/Source/core/paint/InlineTextBoxPainter.cpp b/Source/core/paint/InlineTextBoxPainter.cpp
index 065c612..903d861 100644
--- a/Source/core/paint/InlineTextBoxPainter.cpp
+++ b/Source/core/paint/InlineTextBoxPainter.cpp
@@ -63,8 +63,13 @@ void InlineTextBoxPainter::paint(const PaintInfo& paintInfo, const LayoutPoint&
     LayoutUnit paintEnd = m_inlineTextBox.isHorizontal() ? paintInfo.rect.maxX() : paintInfo.rect.maxY();
     LayoutUnit paintStart = m_inlineTextBox.isHorizontal() ? paintInfo.rect.x() : paintInfo.rect.y();
 
-    // We round the y-axis to ensure consistent line heights.
-    LayoutPoint adjustedPaintOffset = LayoutPoint(paintOffset.x(), paintOffset.y().round());
+   // When subpixel font scaling is enabled text runs are positioned at
+   // subpixel boundaries on the x-axis and thus there is no reason to
+   // snap the x value. We still round the y-axis to ensure consistent
+   // line heights.
+   LayoutPoint adjustedPaintOffset = RuntimeEnabledFeatures::subpixelFontScalingEnabled()
+       ? LayoutPoint(paintOffset.x(), paintOffset.y().round())
+       : roundedIntPoint(paintOffset);
 
     if (logicalStart >= paintEnd || logicalStart + logicalExtent <= paintStart)
         return;
diff --git a/Source/platform/RuntimeEnabledFeatures.in b/Source/platform/RuntimeEnabledFeatures.in
index 0bdab68..4fc23a3 100644
--- a/Source/platform/RuntimeEnabledFeatures.in
+++ b/Source/platform/RuntimeEnabledFeatures.in
@@ -147,6 +147,7 @@ StaleWhileRevalidateCacheControl
 // be shipped would be enabled. Instead, remove the flag from the shipping
 // interface.
 ExperimentalStream status=experimental
+SubpixelFontScaling status=stable
 Suborigins status=experimental
 TextBlob
 ThreadedParserDataReceiver
diff --git a/Source/platform/fonts/FontDescription.cpp b/Source/platform/fonts/FontDescription.cpp
index b26c41f..162e62d 100644
--- a/Source/platform/fonts/FontDescription.cpp
+++ b/Source/platform/fonts/FontDescription.cpp
@@ -161,7 +161,10 @@ float FontDescription::effectiveFontSize() const
     // Ensure that the effective precision matches the font-cache precision.
     // This guarantees that the same precision is used regardless of cache status.
     float computedOrAdjustedSize = hasSizeAdjust() ? adjustedSize() : computedSize();
-    return floorf(computedOrAdjustedSize * FontCacheKey::precisionMultiplier()) / FontCacheKey::precisionMultiplier();
+    float size = (RuntimeEnabledFeatures::subpixelFontScalingEnabled())
+         ? computedOrAdjustedSize
+         : computedPixelSize();
+    return floorf(size * FontCacheKey::precisionMultiplier()) / FontCacheKey::precisionMultiplier();
 }
 
 FontCacheKey FontDescription::cacheKey(const FontFaceCreationParams& creationParams, FontTraits desiredTraits) const
diff --git a/Source/platform/fonts/linux/FontPlatformDataLinux.cpp b/Source/platform/fonts/linux/FontPlatformDataLinux.cpp
index e1ea27d..180acef 100644
--- a/Source/platform/fonts/linux/FontPlatformDataLinux.cpp
+++ b/Source/platform/fonts/linux/FontPlatformDataLinux.cpp
@@ -81,8 +81,8 @@ void FontPlatformData::setupPaint(SkPaint* paint, float deviceScaleFactor, const
     if (m_style.useAntiAlias)
         paint->setLCDRenderText(m_style.useSubpixelRendering);
 
-    // Do not enable subpixel text on low-dpi if full hinting is requested.
-    bool useSubpixelText = (paint->getHinting() != SkPaint::kFull_Hinting || deviceScaleFactor > 1.0f);
+    bool useSubpixelText = RuntimeEnabledFeatures::subpixelFontScalingEnabled()
+        && (paint->getHinting() != SkPaint::kFull_Hinting || deviceScaleFactor > 1.0f);
 
     // TestRunner specifically toggles the subpixel positioning flag.
     if (useSubpixelText && !LayoutTestSupport::isRunningLayoutTest())
diff --git a/Source/platform/fonts/mac/FontCacheMac.mm b/Source/platform/fonts/mac/FontCacheMac.mm
index 14ac4e6..bdecd5e 100644
--- a/Source/platform/fonts/mac/FontCacheMac.mm
+++ b/Source/platform/fonts/mac/FontCacheMac.mm
@@ -74,7 +74,7 @@ static bool useHinting()
     // Enable hinting when subpixel font scaling is disabled or
     // when running the set of standard non-subpixel layout tests,
     // otherwise use subpixel glyph positioning.
-    return (LayoutTestSupport::isRunningLayoutTest() && !LayoutTestSupport::isFontAntialiasingEnabledForTest());
+    return (LayoutTestSupport::isRunningLayoutTest() && !LayoutTestSupport::isFontAntialiasingEnabledForTest()) || !RuntimeEnabledFeatures::subpixelFontScalingEnabled();
 }
 
 void FontCache::platformInit()
diff --git a/Source/platform/fonts/mac/FontPlatformDataMac.mm b/Source/platform/fonts/mac/FontPlatformDataMac.mm
index 1eaa476..ecd8d2b 100644
--- a/Source/platform/fonts/mac/FontPlatformDataMac.mm
+++ b/Source/platform/fonts/mac/FontPlatformDataMac.mm
@@ -29,6 +29,7 @@
 #import <wtf/text/WTFString.h>
 
 #import "platform/LayoutTestSupport.h"
+#import "platform/RuntimeEnabledFeatures.h"
 #import "platform/fonts/Font.h"
 #import "platform/fonts/shaping/HarfBuzzFace.h"
 #import "public/platform/Platform.h"
@@ -129,6 +130,8 @@ void FontPlatformData::setupPaint(SkPaint* paint, float, const Font* font) const
         shouldAntialias = shouldAntialias && LayoutTestSupport::isFontAntialiasingEnabledForTest();
     }
 
+    bool useSubpixelText = RuntimeEnabledFeatures::subpixelFontScalingEnabled();
+
     paint->setAntiAlias(shouldAntialias);
     paint->setEmbeddedBitmapText(false);
     const float ts = m_textSize >= 0 ? m_textSize : 12;
@@ -137,7 +140,7 @@ void FontPlatformData::setupPaint(SkPaint* paint, float, const Font* font) const
     paint->setFakeBoldText(m_syntheticBold);
     paint->setTextSkewX(m_syntheticItalic ? -SK_Scalar1 / 4 : 0);
     paint->setLCDRenderText(shouldSmoothFonts);
-    paint->setSubpixelText(true);
+    paint->setSubpixelText(useSubpixelText);
 
     // When rendering using CoreGraphics, disable hinting when webkit-font-smoothing:antialiased or
     // text-rendering:geometricPrecision is used.
diff --git a/Source/platform/fonts/shaping/HarfBuzzShaper.cpp b/Source/platform/fonts/shaping/HarfBuzzShaper.cpp
index 1c17bb2..a5e5ce8 100644
--- a/Source/platform/fonts/shaping/HarfBuzzShaper.cpp
+++ b/Source/platform/fonts/shaping/HarfBuzzShaper.cpp
@@ -755,6 +755,9 @@ PassRefPtr<ShapeResult> HarfBuzzShaper::shapeResult()
         return nullptr;
     }
 
+    if (!RuntimeEnabledFeatures::subpixelFontScalingEnabled())
+        result->m_width = roundf(result->m_width);
+
     return adoptRef(result);
 }
 
diff --git a/Source/platform/fonts/win/FontCacheSkiaWin.cpp b/Source/platform/fonts/win/FontCacheSkiaWin.cpp
index f6510a1..ec6d30b 100644
--- a/Source/platform/fonts/win/FontCacheSkiaWin.cpp
+++ b/Source/platform/fonts/win/FontCacheSkiaWin.cpp
@@ -102,7 +102,7 @@ FontCache::FontCache()
 
     if (s_useDirectWrite) {
         fontManager = SkFontMgr_New_DirectWrite(s_directWriteFactory);
-        s_useSubpixelPositioning = true;
+        s_useSubpixelPositioning = RuntimeEnabledFeatures::subpixelFontScalingEnabled();
     } else {
         fontManager = SkFontMgr_New_GDI();
         // Subpixel text positioning is not supported by the GDI backend.
diff --git a/Source/web/WebRuntimeFeatures.cpp b/Source/web/WebRuntimeFeatures.cpp
index 9d981aa..bc2f32d 100644
--- a/Source/web/WebRuntimeFeatures.cpp
+++ b/Source/web/WebRuntimeFeatures.cpp
@@ -55,6 +55,7 @@ void WebRuntimeFeatures::enableBleedingEdgeFastPaths(bool enable)
 {
     ASSERT(enable);
     RuntimeEnabledFeatures::setBleedingEdgeFastPathsEnabled(enable);
+    RuntimeEnabledFeatures::setSubpixelFontScalingEnabled(enable || RuntimeEnabledFeatures::subpixelFontScalingEnabled());
     RuntimeEnabledFeatures::setWebAnimationsAPIEnabled(enable);
 }
 
@@ -153,6 +154,11 @@ void WebRuntimeFeatures::enableMediaPlayer(bool enable)
     RuntimeEnabledFeatures::setMediaEnabled(enable);
 }
 
+void WebRuntimeFeatures::enableSubpixelFontScaling(bool enable)
+{
+    RuntimeEnabledFeatures::setSubpixelFontScalingEnabled(enable);
+}
+
 void WebRuntimeFeatures::enableMediaCapture(bool enable)
 {
     RuntimeEnabledFeatures::setMediaCaptureEnabled(enable);
